/**
 * 因子1：年化收益率
            (1 + 当前收益率） ** (252\区间天数) -1
 */
defg getAnnualReturn(value){
      return pow(1 + ((last(value) - first(value))\first(value)), 252\730) - 1
}

/**
 * 因子2：年化波动率
净值波动率：指净值的波动程度，某段时间内，净值的变动的标准差。
净值年化波动率：指将净值波动率年化处理。计算方式为波动率* sqrt（N） 。 （日净值N=250，周净值N=52，月净值N=12）
 */
defg getAnnualVolatility(value){
	return std(deltas(value)\prev(value)) * sqrt(252)
}

/**
 * 因子3：偏度
  偏度：指将收益率偏度年化处理。计算方式为偏度* sqrt（N） 。 （日净值N=250，周净值N=52，月净值N=12）
 */
defg getAnnualSkew(value){
	return skew(deltas(value)\prev(value))
}

/**
 * 因子4：峰度
峰度：指将净值峰度年化处理。计算方式为峰度* sqrt（N） 。 （日净值N=250，周净值N=52，月净值N=12）
 */
defg getAnnualKur(value){
	return kurtosis(deltas(value)\prev(value)) 
}

/**
 * 因子5：夏普比率 无风险收益率按3%
夏普比率：(年化收益率 - 无风险利率) / 收益年化波动率
 */
defg getSharp(value){
	return (getAnnualReturn(value) - 0.03)\getAnnualVolatility(value) as sharpeRat
}

/**
 * 因子6：跟踪误差(Tracking Error)
 */
defg getTrackError(value, price){
	return std(deltas(value)\prev(value) - deltas(price)\prev(price))
}

/**
 * 因子7：信息比率
 * 基金年化收益率 - 指数年化收益率\跟踪误差
 */
 
defg getIndexFundAnReturn(price){
	return pow(1 + ((last(price) - first(price))\first(price)), 252\487) - 1
}
defg getInforRatio(value, price){
	return (pow(1 + ((last(value) - first(value))\first(value)), 252\487) - 1 - getIndexFundAnReturn(price)) \ (getTrackError(value, price) * sqrt(252))
}

/**
 * 因子8：var
 * var 置信度为0.95
 */
defg getVar(value){
	return -percentile(deltas(value)\prev(value), 5)
}

/**
 * 因子9：hist 指数
 * 
 */

pnodeRun(getRecentJobs)


def calAllRs2(mret, symList, k){
        rowCount = mret.rows()/k * k
        demeanCum = rolling(cumsum, mret[0:rowCount,] - each(stretch{, rowCount}, rolling(avg, mret, k, k)), k, k)
        a = rolling(max, demeanCum, k, k) - rolling(min, demeanCum, k, k)
        RS = nullFill!(a/rolling(stdp, mret, k, k), 1.0).mean().log()
        return table(symList as fundNum, take(log(k), symList.size()) as knum, RS as factor1)
}


/**
 * 因子10：HM模型选股能力
 * y 为 基金日收益率的-(0.03\252)
 * 截距为1
 * x1 = 基准收益率 - (0.03\252)
 * x2 = if(x1 > 0, x1, 0)
 */
 defg getHM1(value, price){
 	riskRatio = 0.03\252	 
 	return ols(deltas(value)\prev(value) - riskRatio, (deltas(price)\prev(price) - riskRatio, iif( deltas(price)\prev(price) - riskRatio > 0, deltas(price)\prev(price) - riskRatio, 0))) [0] as intercept

 }
  defg getHM2(value, price){
 	riskRatio = 0.03\252	 
 	return ols(deltas(value)\prev(value) - riskRatio, (deltas(price)\prev(price) - riskRatio, iif( deltas(price)\prev(price) - riskRatio > 0, deltas(price)\prev(price) - riskRatio, 0))) [1] as Cofficient1
	
 }
 
  defg getHM3(value, price){
 	riskRatio = 0.03\252	 
 	return ols(deltas(value)\prev(value) - riskRatio, (deltas(price)\prev(price) - riskRatio, iif( deltas(price)\prev(price) - riskRatio > 0, deltas(price)\prev(price) - riskRatio, 0))) [2] as Cofficient2	
 }

/**
 * 因子执行时间统计
 */

 
def getFactor(result2, symList){
	Return = select fundNum, 
	            getAnnualReturn(value) as annualReturn,
	            getAnnualVolatility(value) as annualVolRat,
	            getAnnualSkew(value) as skewValue,
	            getAnnualKur(value) as kurValue,
	            getSharp(value) as sharpValue,
	            getTrackError(value, price) as trackError,
	            getVar(value) as var,
	            getInforRatio(value, price) as infoRatio,
	            getHM1(value, price) as intercept       
             from result2
             where TradeDate in 2019.05.24..2022.05.27 and fundNum in symList group by fundNum
 }//定义计算九个因子的函数
def parJob1(){
	timer{fund_OLAP=select * from loadTable("dfs://fund_OLAP", "fund_OLAP")
		  fund_hs_OLAP=select * from loadTable("dfs://fund_OLAP", "fund_hs_OLAP")
		  ajResult = select Tradedate, fundNum, value, fund_hs_OLAP.Tradedate as hsTradedate, fund_hs_OLAP.value as price from aj(fund_OLAP, fund_hs_OLAP, `Tradedate)
		  result2 = select Tradedate, fundNum, iif(isNull(value), ffill!(value), value) as value,price from ajResult where Tradedate == hsTradedate
		  symList = exec distinct(fundNum) as fundNum from result2 order by fundNum
		  symList2 = symList.cut(250)}//此处，将任务切分，按每次250个不同基金数据进行计算
	timer{ploop(getFactor{result2}, symList2)}
}//定义获取九个因子计算和数据操作的时间的函数
/**
 * 提交1个job（单用户）
 */
submitJob("parallJob1", "parallJob_single_nine", parJob1)

/**
 * 提交5个job（多用户）
 */
for(i in 0..4){
	submitJob("parallJob5", "parallJob_multi_nine", parJob1)
}
//获取单个用户的运行时间
select max(endTime) - min(startTime) from getRecentJobs() where jobDesc = "parallJob_single_nine"
//获取多个用户的运行时间
select max(endTime) - min(startTime) from getRecentJobs() where jobDesc = "parallJob_multi_nine"


def parJob2(){
	timer{fund_OLAP=select * from loadTable("dfs://fund_OLAP", "fund_OLAP")
		    fund_hs_OLAP=select * from loadTable("dfs://fund_OLAP", "fund_hs_OLAP")
		    ajResult = select Tradedate, fundNum, value, fund_hs_OLAP.Tradedate as hsTradedate, fund_hs_OLAP.value as price from aj(fund_OLAP, fund_hs_OLAP, `Tradedate)
		    result2 = select Tradedate, fundNum, iif(isNull(value), ffill!(value), value) as value,price from ajResult where Tradedate == hsTradedate
        symList = exec distinct(fundNum) as fundNum from result2 order by fundNum
        symList2 = symList.cut(250)//此处，将任务切分，按每次250个不同基金数据进行计算
		    portfolio = select fundNum as fundNum, (deltas(value)\prev(value)) as log, TradeDate as TradeDate from result2 where TradeDate in 2019.05.24..2022.05.27 and fundNum in symList
        m_log = exec log from portfolio pivot by TradeDate, fundNum
        mlog =  m_log[1:,]
        knum = 2..365
}
  timer{ploop(getFactor{result2}, symList2)
        a = ploop(calAllRs2{mlog,symList}, knum).unionAll(false)
        res2 = select fundNum, ols(factor1, kNum)[0] as hist, ols(factor1, kNum)[1] as hist2, ols(factor1, kNum)[2] as hist3 from a group by fundNum}
}//定义获取十个因子计算和数据操作的时间的函数
/**
 * 提交1个job（单用户）
 */
submitJob("parallJob1", "parallJob_single_ten", parJob2)

/**
 * 提交5个job（多用户）
 */
for(i in 0..4){
	submitJob("parallJob5", "parallJob_multi_ten", parJob2)
}
//获取单个用户的运行时间
select max(endTime) - min(startTime) from getRecentJobs() where jobDesc = "parallJob_single_ten"
//获取多个用户的运行时间
select max(endTime) - min(startTime) from getRecentJobs() where jobDesc = "parallJob_multi_ten"